"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAudioDurationInSeconds = void 0;
const execa_1 = __importDefault(require("execa"));
const getFFprobeWrappedExecution = (input, ffprobePath) => (0, execa_1.default)(ffprobePath, [
    '-v',
    'error',
    '-select_streams',
    'a:0',
    '-show_format',
    '-show_streams',
    input,
]);
/**
 * Returns a promise that will be resolved with the duration of given audio in
 * seconds.
 *
 * @param absolutePathToFile Absolute path to file to be used as input for
 * `ffprobe`.
 * @param [ffprobePath] Optional. Path to `ffprobe` binary. Do not provide any
 * value for this parameter unless you need to override the path to `ffprobe`.
 * Defaults to the path provided by `@ffprobe-installer/ffprobe`, which works in
 * most environments.
 *
 * @return Promise that will be resolved with given audio duration in
 * seconds.
 */
const getAudioDurationInSeconds = (absolutePathToFile, ffprobePath) => __awaiter(void 0, void 0, void 0, function* () {
    const { stdout } = yield getFFprobeWrappedExecution(absolutePathToFile, ffprobePath !== null && ffprobePath !== void 0 ? ffprobePath : (yield Promise.resolve().then(() => __importStar(require('@ffprobe-installer/ffprobe')))).path);
    const matched = stdout.match(/duration="?(\d*\.\d*)"?/);
    if (matched && matched[1])
        return parseFloat(matched[1]);
    throw new Error('No duration found!');
});
exports.getAudioDurationInSeconds = getAudioDurationInSeconds;
exports.default = getAudioDurationInSeconds;
//# sourceMappingURL=index.js.map